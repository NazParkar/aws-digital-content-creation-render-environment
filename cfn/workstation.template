AWSTemplateFormatVersion: 2010-09-09
Description: Provides configuration for a Deadline workstation instance.

Parameters:
  Subnet:
    Type: AWS::EC2::Subnet::Id

  WorkstationSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  InstanceType:
    Type: String

  InstanceAMI:
    Type: AWS::EC2::Image::Id

  WorkstationEBSVolumeSize:
    Type: Number

  Environment:
    Type: String

  WorkstationInstanceProfile:
    Type: String

  AppVersion:
    Type: String

  LicenseServerInstancePrivateIp:
    Type: String

  RepositoryInstancePrivateIp:
    Type: String

  EC2UserPassword:
    Type: String
    NoEcho: true

  ArtefactBucketName:
    Type: String

  EfsFileSystem:
    Type: String

Resources:
  WorkstationInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          dcc_install:
            - instance_prep
            - artefacts_download
            - blender_download
            - app_install
            - post_install
        instance_prep:
          packages:
            yum:
              system-lsb: []
              cifs-utils: []
          files:
            /opt/scripts/ec2-mount-ebs-volume.sh:
              content: |
                #!/usr/bin/env bash
                  mkdir -p /data
                  while [ ! -b $(readlink -f /dev/xvdh) ]; do echo "waiting for device /dev/xvdh"; sleep 5 ; done
                  blkid $(readlink -f /dev/xvdh) || mkfs -t ext4 $(readlink -f /dev/xvdh)
                  e2label $(readlink -f /dev/xvdh) dcc-data
                  grep -q ^LABEL=dcc-data /etc/fstab || echo 'LABEL=dcc-data /data ext4 defaults' >> /etc/fstab
                  grep -q "^$(readlink -f /dev/xvdh) /data " /proc/mounts || mount /data
              mode: '000755'
              owner: root
              group: root
            /opt/scripts/dns.sh:
              content: !Sub |
                #!/usr/bin/env bash
                results=1
                while [[ $results != 0 ]]; do
                  nslookup ${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com
                  results=$?
                  if [[ $results = 1 ]]; then
                    sleep 30s
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            /etc/dcv/dcv.conf:
              content: |
                [session-management]
                create-session = true
                [session-management/automatic-console-session]
                owner="ec2-user"
                [display]
                cuda-devices=['0']
                [display/linux]
                gl-displays=[':0.0']
            /home/ec2-user/.smbcredentials:
              content: !Sub |
                username=ec2-user
                password=${EC2UserPassword}
              mode: '000400'
              owner: ec2-user
              group: ec2-user
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WorkstationInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkstationInstance --configsets dcc_install --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          commands:
            01-mount-ebs-volume:
              command: sh /opt/scripts/ec2-mount-ebs-volume.sh > /opt/scripts/ec2-mount-ebs-volume.log 2>&1
              test: test -x /opt/scripts/ec2-mount-ebs-volume.sh  # check if filename exists and is executable
              ignoreErrors: false
            02-wait_for_dns_propogation:
              command: sh /opt/scripts/dns.sh
              test: test -x /opt/scripts/dns.sh
            03-mount_efs:
              command: !Sub |
                #!/bin/bash -xe
                EFS_DIRECTORY=/mnt/efs
                mkdir $EFS_DIRECTORY
                echo "${EfsFileSystem}:/ $EFS_DIRECTORY efs _netdev" >> /etc/fstab
                mount -a -t efs defaults
              ignoreErrors: false
            04-set-permission-on-efs:
              command: chown -R ec2-user:root /mnt/efs
            05-mkdir_DeadlineRepository:
              command: mkdir -p /data/DeadlineRepository
            06-mount_DeadlineRepository:
              command: !Sub |
                # create fstab entry for Deadline repository
                echo "//${RepositoryInstancePrivateIp}/DeadlineRepository /data/DeadlineRepository cifs credentials=/home/ec2-user/.smbcredentials,uid=ec2-user 0 0" >> /etc/fstab
                # mount the Deadline repository
                mount -a
              ignoreErrors: true
            07-set_ec2_user_password:
              command: !Sub echo ${EC2UserPassword} | tee - | passwd ec2-user
          services:
            sysvinit:
              dcvserver:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/dcv/dcv.conf
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
        artefacts_download:
          sources:
            /data/thinkbox: !Sub https://${ArtefactBucketName}.s3.amazonaws.com/Deadline-${AppVersion}-linux-installers.tar
        blender_download:
          sources:
            /usr/local: !Sub https://${ArtefactBucketName}.s3.amazonaws.com/Blender.zip
        app_install:
          commands:
            01-install_repository:
              command: !Sub |
                ls /data/thinkbox | grep DeadlineClient | \
                  (read data; /data/thinkbox/$data \
                  --mode unattended \
                  --prefix "/data/thinkbox/Deadline10" \
                  --connectiontype Repository \
                  --repositorydir "/data/DeadlineRepository" \
                  --licensemode Standard \
                  --licenseserver @${LicenseServerInstancePrivateIp} \
                  --launcherstartup true \
                  --slavestartup false)
              ignoreErrors: true
        post_install:
          packages:
            amazon-linux-extras:
              gimp: []
          commands:
            01-install-google-chrome:
              command: |
                cd /home/ec2-user
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
                yum localinstall -y google-chrome-stable_current_x86_64.rpm
              ignoreErrors: true
            02-install-gimp:
              command: amazon-linux-extras install -y gimp
              ignoreErrors: true

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvdh
          Ebs:
            VolumeSize: !Ref WorkstationEBSVolumeSize
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      IamInstanceProfile: !Ref WorkstationInstanceProfile
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WorkstationSecurityGroup
      SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: deadline-workstation
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe

          # Update aws-cfn-bootstrap to the latest
          yum install -y aws-cfn-bootstrap

          # Install efs-utils
          yum install -y amazon-efs-utils

          # Install the EPEL release package for EL 7 and enable the EPEL repository
          #yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          #yum-config-manager --enable epel
          #yum update -y --skip-broken

          # Call cfn-init script to install files and packages
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkstationInstance --configsets dcc_install --region ${AWS::Region}
          # Call cfn-signal script to send a signal with exit code
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WorkstationInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"

Outputs:
  WorkstationInstancePrivateIp:
    Value: !GetAtt WorkstationInstance.PrivateIp

  DeadlineVersion:
    Value: !Ref AppVersion

#  WorkstationPublicIP:
#    Value: !Join ['', [ 'https://', !GetAtt WorkstationInstance.PublicIp, ':8443'] ]
