AWSTemplateFormatVersion: 2010-09-09
Description: Provides configuration for a Deadline workstation instance.

Parameters:
  VpcID:
    Type: AWS::EC2::VPC::Id

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id

  InstanceType:
    Type: String

  InstanceAMI:
    Type: AWS::EC2::Image::Id

  Environment:
    Type: String

  WorkstationInstanceProfile:
    Type: String

  AppVersion:
    Type: String

  OnPremIp:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  LicenseServerInstancePrivateIp:
    Type: String

  RepositoryInstancePrivateIp:
    Type: String

  SambaPassword:
    Type: String
    NoEcho: true

  NiceDCVPassword:
    Type: String
    NoEcho: true

  RepositorySecurityGroup:
    Type: String

  LicenseServerSecurityGroup:
    Type: String

  ArtefactBucketName:
    Type: String

Resources:
  WorkstationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for workstation instance
      VpcId: !Ref VpcID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref OnPremIp
      Tags:
        - Key: Name
          Value: deadline-workstation-sg
        - Key: Environment
          Value: !Ref Environment

  WorkstationToRepositoryIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RepositorySecurityGroup
      Description: deadline-workstation-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref WorkstationSecurityGroup

  WorkstationToLicenseServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LicenseServerSecurityGroup
      Description: deadline-workstation-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref WorkstationSecurityGroup

  WorkstationInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          dcc_install:
            - instance_prep
            - artefacts_download
            - app_install
        instance_prep:
          packages:
            yum:
              system-lsb: []
          users:
            deadlineuser: {}
          files:
            /opt/scripts/ec2-mount-ebs-volume.sh:
              content: |
                #!/usr/bin/env bash
                mkdir -p /var/data
                while [ ! -b $(readlink -f /dev/xvdh) ]; do echo "waiting for device /dev/xvdh"; sleep 5 ; done
                blkid $(readlink -f /dev/xvdh) || mkfs -t ext4 $(readlink -f /dev/xvdh)
                e2label $(readlink -f /dev/xvdh) dcc-data
                grep -q ^LABEL=dcc-data /etc/fstab || echo 'LABEL=dcc-data /var/data ext4 defaults' >> /etc/fstab
                grep -q "^$(readlink -f /dev/xvdh) /var/data " /proc/mounts || mount /var/data
              mode: '000755'
              owner: root
              group: root
            /etc/dcv/dcv.conf:
              content: |
                [session-management]
                create-session = true
                [session-management/automatic-console-session]
                owner="ec2-user"
                [display]
                cuda-devices=['0']
                [display/linux]
                gl-displays=[':0.0']
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WorkstationInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkstationInstance --configsets dcc_install --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          commands:
            01-mount-ebs-volume:
              command: sh /opt/scripts/ec2-mount-ebs-volume.sh > /opt/scripts/ec2-mount-ebs-volume.log 2>&1
              test: test -x /opt/scripts/ec2-mount-ebs-volume.sh  # check if filename exists and is executable
              ignoreErrors: false
            02-mkdir_DeadlineRepository:
              command: mkdir -p /data/DeadlineRepository
            03-mount_DeadlineRepository:
              command: !Sub |
                # create fstab entry for Deadline repository
                echo "//${RepositoryInstancePrivateIp}/DeadlineRepository /data/DeadlineRepository cifs username=deadlineuser,password=${SambaPassword} 0 0" >> /etc/fstab
                # mount the Deadline repository
                mount -a
              ignoreErrors: true
            04-set_ec2_user_password:
              command: !Sub echo ${NiceDCVPassword} | tee - | passwd ec2-user
          services:
            sysvinit:
              dcvserver:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/dcv/dcv.conf
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
        artefacts_download:
          sources:
            /data/thinkbox: !Sub https://${ArtefactBucketName}.s3.amazonaws.com/Deadline-${AppVersion}-linux-installers.tar
        app_install:
          commands:
            01-install_repository:
              command: !Sub |
                ls /data/thinkbox | grep DeadlineClient | \
                  (read data; /data/thinkbox/$data \
                  --mode unattended \
                  --prefix "/data/thinkbox/DeadlineRepository10" \
                  --connectiontype Repository \
                  --repositorydir "/data/DeadlineRepository" \
                  --licensemode Standard \
                  --licenseserver @${LicenseServerInstancePrivateIp} \
                  --launcherstartup true \
                  --slavestartup false)
              ignoreErrors: true
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvdh
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      IamInstanceProfile: !Ref WorkstationInstanceProfile
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WorkstationSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: deadline-workstation
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          # Update aws-cfn-bootstrap to the latest
          yum install -y aws-cfn-bootstrap
          # Call cfn-init script to install files and packages
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkstationInstance --configsets dcc_install --region ${AWS::Region}
          # Call cfn-signal script to send a signal with exit code
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WorkstationInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"

Outputs:
  WorkstationSecurityGroup:
    Value: !Ref WorkstationSecurityGroup

  WorkstationInstancePrivateIp:
    Value: !GetAtt WorkstationInstance.PrivateIp

  DeadlineVersion:
    Value: !Ref AppVersion

  WorkstationPublicIP:
    Value: !Join ['', [ 'https://', !GetAtt WorkstationInstance.PublicIp, ':8443'] ]
